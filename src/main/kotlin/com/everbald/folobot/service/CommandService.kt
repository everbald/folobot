package com.everbald.folobot.service

import com.everbald.folobot.domain.type.PluralType
import com.everbald.folobot.extensions.addMessage
import com.everbald.folobot.extensions.chatId
import com.everbald.folobot.extensions.from
import com.everbald.folobot.extensions.isFo
import com.everbald.folobot.extensions.spellOut
import com.everbald.folobot.extensions.toTextWithNumber
import com.everbald.folobot.service.folocoin.FoloCoinService
import com.everbald.folobot.service.folocoin.FoloIndexService.Companion.FOLO_STOCK_IMAGE
import com.everbald.folobot.service.hh.HHService
import com.everbald.folobot.utils.FoloId.ANDREW_ID
import jakarta.annotation.Priority
import mu.KLogging
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.Update
import java.time.LocalDate
import java.time.Period

@Component
@Priority(1)
class CommandService(
    private val foloVarService: FoloVarService,
    private val messageService: MessageService,
    private val messageQueueService: MessageQueueService,
    private val keyboardService: KeyboardService,
    private val foloCoinService: FoloCoinService,
    private val foloBailService: FoloBailService,
    private val hhService: HHService,
    private val userService: UserService,
) : KLogging() {
    /**
     * –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –¥–Ω—è F
     *
     * @param update [Update]
     */
    fun freelanceTimer(update: Update) {
        messageService.sendMessage(
            """
                18 –Ω–æ—è–±—Ä—è 2019 –≥–æ–¥–∞ —è —É–≤–æ–ª–∏–ª—Å—è —Å –∑–∞–≤–æ–¥–∞ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é.
                –° —Ç–µ—Ö –ø–æ—Ä —è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –≤—Ö–æ–∂—É –≤ IT –≤–æ—Ç —É–∂–µ
                *${Period.between(LocalDate.of(2019, 11, 18), LocalDate.now()).toTextWithNumber()}*!
            """.trimIndent(),
            update
        ).also { logger.addMessage(it) }
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–ø–∞. –§–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä
     */
    fun nofapTimer(update: Update) {
        val noFapDate: LocalDate
        var noFapCount = 0
        // –§–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É
        if (update.message.from.isFo) {
            noFapDate = LocalDate.now()
            foloVarService.setLastFapDate(noFapDate)
        } else {
            noFapDate = foloVarService.getLastFapDate()
            noFapCount = foloVarService.getNoFapCount(update.message.chatId)
        }
        if (noFapDate == LocalDate.now()) {
            messageService.sendMessage(
                """
                    –í—Å–µ —ç—Ç–∏ –º–æ–ª–æ–¥–µ–Ω—å–∫–∏–µ –Ω—è—à–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥...
                    –°–æ—Ä–≤–∞–ª—Å—è "–ù–æ –§–∞–ø" —Å–µ–≥–æ–¥–Ω—è...
                """.trimIndent(),
                update
            )
        } else {
            messageService.sendMessage(
                "–î–ª—è –æ—Å–æ–±–æ –æ–∑–∞–±–æ—á–µ–Ω–Ω—ã—Ö –≤ *${noFapCount.spellOut()}* —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—è—é —Ç—É—Ç –í–∞–º, —á—Ç–æ —è —Å " +
                        "*${noFapDate.toTextWithNumber()}* –∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –≤–æ—Ç —É–∂–µ *${
                            Period.between(noFapDate, LocalDate.now()).toTextWithNumber()
                        }* " +
                        "—Ç–≤—ë—Ä–¥–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–µ—Ä–∂—É \"–ù–æ –§–∞–ø\".",
                update
            )
        }.also { logger.addMessage(it) }
    }

    fun foloPidor(update: Update) =
        messageService.sendPhoto(
            "/static/images/foloPidors.jpg",
            update.message.chatId,
            """
                –ú–° –§–æ–ª–æ–º–∫–∏–Ω —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Ä–µ–ª–∏–≥–∏—é,
                –ú–∏–ª–ª–∏–æ–Ω—ã —Ñ–∞–Ω–∞—Ç–∏–∫–æ–≤ –≤–æ –≤—Å—ë–º –º–∏—Ä–µ —Å–ª—É—à–∞—é—Ç –º–æ–∏ —Ç—Ä—ç–∫–∏,
                –î–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç—ã –º–æ–∏—Ö –ø–µ—Å–µ–Ω —Å–≤—è—â–µ–Ω–Ω—ã, –±—É–¥—Ç–æ —Å–ª–æ–≤–æ –ë–æ–∂—å–µ –≤ –ë–∏–±–ª–∏–∏
            """.trimIndent(),
            keyboardService.getFoloPidorKeyboard()
        )

    /**
     * –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∞–ª—å—Ñ—ã
     *
     * @param update [Update]
     */
    fun alphaTimer(update: Update) {
        val alfaBirthday = LocalDate.of(1983, 8, 9)
        val alphaBirthdayThisYear = alfaBirthday.withYear(LocalDate.now().year)
        val nextAlphaBirthday =
            if (alphaBirthdayThisYear.isBefore(LocalDate.now()))
                alphaBirthdayThisYear.plusYears(1)
            else alphaBirthdayThisYear

        if (nextAlphaBirthday == LocalDate.now()) {
            messageService.sendMessage(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –º–æ–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –¥—Ä—É–≥–∞ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ–ª–æ–ø–∏–¥–æ—Ä–∞ " +
                        "[–ê–Ω–¥—Ä–µ—è](tg://user?id=$ANDREW_ID) —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n–°–µ–≥–æ–¥–Ω—è –µ–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å " +
                        "*${Period.between(alfaBirthday, nextAlphaBirthday).years.toTextWithNumber(PluralType.YEARISH)}*!",
                update
            )
        } else {
            messageService.sendMessage(
                "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–æ–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –¥—Ä—É–≥–∞ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ–ª–æ–ø–∏–¥–æ—Ä–∞ " +
                        "[–ê–Ω–¥—Ä–µ—è](tg://user?id=$ANDREW_ID) *${alfaBirthday.toTextWithNumber()}* —á–µ—Ä–µ–∑ " +
                        "*${Period.between(LocalDate.now(), nextAlphaBirthday).toTextWithNumber()}*",
                update
            )
        }.also { logger.addMessage(it) }
    }

    fun foloCoin(update: Update) =
        messageService.sendPhoto(
            FOLO_STOCK_IMAGE,
            update.message.chatId,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–æ–ª–æ–±–∏—Ä–∂—É!",
            keyboardService.getFoloCoinKeyboard(update.message.isUserMessage)
        )

    fun foloCoinTransfer(update: Update): Message? {
        val coinBalance = foloCoinService.getById(update.from.id).coins
        return if (coinBalance > 0) {
            messageService.sendMessage(
                """
                    –í—ã–±–µ—Ä–∏ —Ñ–æ–ª–æ–ø–∏–¥–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.
                    –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –µ–≥–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                """.trimIndent(),
                update,
                keyboardService.getFolocoinTransferKeyboard()
            )
        } else {
            messageService.sendMessage(
                "–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç–µ –Ω–µ—Ç —Ñ–æ–ª–æ–∫–æ–π–Ω–æ–≤ –¥–æ—Å—É–ø–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –¥—É–≥–æ–º—É —Ñ–æ–ª–æ–ø–∏–¥–æ—Ä—É ü´•",
                update,
            )
        }.also { logger.addMessage(it) }
    }

    fun aboutIt(update: Update) {
        hhService.getVacancy()
            ?.let {
                messageQueueService.sendAndAddToQueue(
                    "–û–∫, ${userService.getCustomNameLinked(update.from, update.chatId)}, " +
                            "–≤–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"–≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ IT\": \n\n" + it,
                    update
                )
            } ?: let {
            messageQueueService.sendAndAddToQueue(
                "–û–∫, ${userService.getCustomNameLinked(update.from, update.chatId)}, " +
                        "–ø–æ –∑–∞–ø—Ä–æ—Å—É \"–≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ IT\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                update
            )
        }
    }

    fun foloBail(update: Update) =
        messageService.sendPhoto(
            chatId = update.chatId,
            photoPath = "/static/images/skibidiBoba.jpg",
            text = foloBailService.buildTodayBailText(update.chatId)
        )
}